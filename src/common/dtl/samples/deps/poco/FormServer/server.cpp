//
// HTTPFormServer.cpp
//
// $Id: //poco/Main/Net/samples/HTTPFormServer/src/HTTPFormServer.cpp#5 $
//
// This sample demonstrates the HTTPServer and HTMLForm classes.
//
// Copyright (c) 2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/Net/HTTPServer.h"
#include "Poco/Net/HTTPRequestHandler.h"
#include "Poco/Net/HTTPRequestHandlerFactory.h"
#include "Poco/Net/HTTPServerParams.h"
#include "Poco/Net/HTTPServerRequest.h"
#include "Poco/Net/HTTPServerResponse.h"
#include "Poco/Net/HTTPServerParams.h"
#include "Poco/Net/HTMLForm.h"
#include "Poco/Net/PartHandler.h"
#include "Poco/Net/MessageHeader.h"
#include "Poco/Net/ServerSocket.h"
#include <dtprec.h>
#include <dtl/dtl.h>
#include "Poco/CountingStream.h"
#include "Poco/NullStream.h"
#include "Poco/StreamCopier.h"
//#include "Poco/Exception.h"
#include "Poco/Util/ServerApplication.h"
#include "Poco/Util/Option.h"
#include "Poco/Util/OptionSet.h"
#include "Poco/Util/HelpFormatter.h"
#include <iostream>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/select.h>
#include <sys/socket.h>
#include <unistd.h>

using Poco::Net::ServerSocket;
using Poco::Net::HTTPRequestHandler;
using Poco::Net::HTTPRequestHandlerFactory;
using Poco::Net::HTTPServer;
using Poco::Net::HTTPServerRequest;
using Poco::Net::HTTPServerResponse;
using Poco::Net::HTTPServerParams;
using Poco::Net::MessageHeader;
using Poco::Net::HTMLForm;
using Poco::Net::NameValueCollection;
using Poco::Util::ServerApplication;
using Poco::Util::Application;
using Poco::Util::Option;
using Poco::Util::OptionSet;
using Poco::Util::HelpFormatter;
using Poco::CountingInputStream;
using Poco::NullOutputStream;
using Poco::StreamCopier;

#define MAX_UPLOAD_BUFFER_SIZE (4*1024*1024)

int64 size = 0;

class MyPartHandler: public Poco::Net::PartHandler
{
public:
	MyPartHandler():
		_length(0)
	{
		_uploadData = new char [MAX_UPLOAD_BUFFER_SIZE];
	}
	~MyPartHandler()
	{
		DSAFE_DELETE(_uploadData);
	}
	
	//upload内容处理
	void handlePart(const MessageHeader& header, std::istream& stream)
	{
			//获得 contentType
		_type = header.get("Content-Type", "(unspecified)");
		
		if (header.has("Content-Disposition"))
		{
			std::string disp;
			NameValueCollection params;
			MessageHeader::splitParameters(header["Content-Disposition"], disp, params);
			_name = params.get("name", "(unnamed)");
			_filename = params.get("filename", "(unnamed)");
		}
		
		stream.read(_uploadData, MAX_UPLOAD_BUFFER_SIZE);
		int n = stream.gcount();
		

		while (n > 0)
		{
			_length += n;
			
			if (stream)
			{
				// 这里因为内存是预先分配的4M，太大就溢出了
				if (_length >= MAX_UPLOAD_BUFFER_SIZE) {
				
					break;
				}
			
				// 读取剩下来的数据块
				stream.read(_uploadData + _length, MAX_UPLOAD_BUFFER_SIZE - _length);
				n = stream.gcount();
			}
			else 
				n = 0;
		}
	
		
	}
	
	int length() const
	{
		return _length;
	}
	
	const std::string& name() const
	{
		return _name;
	}

	const std::string& fileName() const
	{
		return _filename;
	}
	
	const std::string& contentType() const
	{
		return _type;
	}
	
private:
	int _length;
	std::string _type;
	std::string _name;
	std::string _filename;
	
	char *_uploadData;
};


//处理请求信息类
class FormRequestHandler: public HTTPRequestHandler
{
public:
	FormRequestHandler() 
	{

	}
	
	void handleRequest(HTTPServerRequest& request, HTTPServerResponse& response)
	{
		 
	// printf ("thread id: %d\n", Thread::getCurThreadId ());	
		//处理form中upload信息流
		MyPartHandler partHandler;
		HTMLForm form(request, request.stream(), partHandler);
		
		//设置form读一个流或者字符串的大小，提防非法攻击.
		//默认100,0为无限制，
		//不建议置0
		form.setFieldLimit(0);
		
		
		//构造响应信息
		std::ostream& ostr = response.send();
		ostr << "asdasdasdad";


	}
};


class FormRequestHandlerFactory: public HTTPRequestHandlerFactory
{
public:
	FormRequestHandlerFactory()
	{
	}

	HTTPRequestHandler* createRequestHandler(const HTTPServerRequest& request)
	{
		return new FormRequestHandler;
	}
};


//httpformserver类 
class HTTPFormServer: public Poco::Util::ServerApplication
{
public:
	HTTPFormServer(): _helpRequested(false)
	{

	}
	
	~HTTPFormServer()
	{
	}

protected:
	void initialize(Application& self)
	{
		loadConfiguration(); // load default configuration files, if present
		ServerApplication::initialize(self);
	}
		
	void uninitialize()
	{
		ServerApplication::uninitialize();
	}

	void defineOptions(OptionSet& options)
	{
		ServerApplication::defineOptions(options);
		
		options.addOption(
			Option("help", "h", "display help information on command line arguments")
				.required(false)
				.repeatable(false));
	}

	void handleOption(const std::string& name, const std::string& value)
	{
		ServerApplication::handleOption(name, value);

		if (name == "help")
			_helpRequested = true;
	}

	void displayHelp()
	{
		HelpFormatter helpFormatter(options());
		helpFormatter.setCommand(commandName());
		helpFormatter.setUsage("OPTIONS");
		helpFormatter.setHeader("A web server that shows how to work with HTML forms.");
		helpFormatter.format(std::cout);
	}

	int main(const std::vector<std::string>& args)
	{
		if (_helpRequested)
		{
			displayHelp();	
		}
		else
		{
			unsigned short port = (unsigned short) config().getInt("HTTPFormServer.port", 9980);
			
			//构建一个套接字 配置相应参数
			
			
			
			// set-up a server socket
			ServerSocket svs(port);			
			
			Poco::ThreadPool threadpool;
			threadpool.addCapacity(100);
			

			_param = new HTTPServerParams ();
			_param->setThreadIdleTime (10000000);	// thread idle time
			_param->setMaxThreads (100);		// 最大线程
			_param->setMaxQueued (1024);		// 最大等待队列任务数	
			
			// set-up a HTTPServer instance
			HTTPServer	srv(new FormRequestHandlerFactory, threadpool,svs, _param);
			
			// start the HTTPServer
			srv.start();
			 while(1)
			{
				Sleep(2000);
				cout << "totalConnections: " << srv.totalConnections() << endl;
				cout << "currentThreads: " << srv.currentThreads() << endl;
				cout << "queuedConnections:"  << srv.queuedConnections()<< endl;
				cout << "currentConnections:" << srv.currentConnections() << endl;
				cout << "maxConcurrentConnections:" << srv.maxConcurrentConnections()<< endl;
			}
			// wait for CTRL-C or kill
			waitForTerminationRequest();

	
			// Stop the HTTPServer
			srv.stop();
			
		}
		return Application::EXIT_OK;
	}
	
private:
	bool 				_helpRequested;
	HTTPServerParams	*_param;
};


int main(int argc, char** argv)
{
	HTTPFormServer app;
	return app.run(argc, argv);
}
