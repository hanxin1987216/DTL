#include <dtprec.h>#include <cppunit/tester.h>#include <dtl/dtl.h>#include "chartc.h"CPPUNIT_TEST_SUITE_REGISTRATION( CharTestCase );voidCharTestCase::isWhiteSpace (void){	wchar_t ch = ' ';	CPPUNIT_ASSERT ( Char::isWhiteSpace ( ch ) == true);	ch = 'a';	CPPUNIT_ASSERT ( Char::isWhiteSpace ( ch ) == false);	ch = ';';	CPPUNIT_ASSERT ( Char::isWhiteSpace ( ch ) == false);		ch = 'true';	CPPUNIT_ASSERT ( Char::isWhiteSpace ( ch ) == false);		ch = '$';	CPPUNIT_ASSERT ( Char::isWhiteSpace ( ch ) == false);		ch = '12';	CPPUNIT_ASSERT ( Char::isWhiteSpace ( ch ) == false);		}void CharTestCase::isDigit (void){	wchar_t ch = 'd';	CPPUNIT_ASSERT ( Char::isDigit ( ch ) == false);	    ch = '$';	CPPUNIT_ASSERT ( Char::isDigit ( ch ) == false);	    ch = '2';	CPPUNIT_ASSERT ( Char::isDigit ( ch ) == true);	    ch = '23';	CPPUNIT_ASSERT ( Char::isDigit ( ch ) == false);	    ch = '34';	CPPUNIT_ASSERT ( Char::isDigit ( ch ) == false);		ch = '4';	CPPUNIT_ASSERT ( Char::isDigit ( ch ) == true);}voidCharTestCase::isLetter (void){	wchar_t ch = 'a';	CPPUNIT_ASSERT ( Char::isLetter ( ch ) == true);		ch = 'A';	CPPUNIT_ASSERT ( Char::isLetter ( ch ) == true);		ch = '#';	CPPUNIT_ASSERT ( Char::isLetter ( ch ) == false);		ch = '$';	CPPUNIT_ASSERT ( Char::isLetter ( ch ) == false);		ch = '!';	CPPUNIT_ASSERT ( Char::isLetter ( ch ) == false);		ch = 'true';	CPPUNIT_ASSERT ( Char::isLetter ( ch ) == false);}voidCharTestCase::isLower (void){	wchar_t ch = 'a';	CPPUNIT_ASSERT ( Char::isLower ( ch ) == true);		ch = 'A';	CPPUNIT_ASSERT ( Char::isLower ( ch ) == false);		ch = 'true';	CPPUNIT_ASSERT ( Char::isLower ( ch ) == false);		ch = '#';	CPPUNIT_ASSERT ( Char::isLower ( ch ) == false);		ch = ';';	CPPUNIT_ASSERT ( Char::isLower ( ch ) == false);}void CharTestCase::isUpper (void){	wchar_t ch = 'a';	CPPUNIT_ASSERT ( Char::isLower ( ch ) == true);		ch = 'A';	CPPUNIT_ASSERT ( Char::isLower ( ch ) == false);		ch = 'true';	CPPUNIT_ASSERT ( Char::isLower ( ch ) == false);		ch = '#';	CPPUNIT_ASSERT ( Char::isLower ( ch ) == false);		ch = ';';	CPPUNIT_ASSERT ( Char::isLower ( ch ) == false);}void CharTestCase::isNumber (void){	wchar_t ch = 'a';	CPPUNIT_ASSERT ( Char::isNumber ( ch) == false);		ch = 'A';	CPPUNIT_ASSERT ( Char::isNumber ( ch) == false);		ch = 'true';	CPPUNIT_ASSERT ( Char::isNumber ( ch) == true);		ch = '#';	CPPUNIT_ASSERT ( Char::isNumber ( ch) == false);		ch = ';';	CPPUNIT_ASSERT ( Char::isNumber ( ch) == false);	ch = '23';	CPPUNIT_ASSERT ( Char::isNumber ( ch) == false);		ch = '23';	CPPUNIT_ASSERT ( Char::isNumber ( ch) == false);}void CharTestCase::isPunctuation (void){	wchar_t ch = 'a';	CPPUNIT_ASSERT ( Char::isPunctuation ( ch) == false);		ch = 'A';	CPPUNIT_ASSERT ( Char::isPunctuation ( ch) == false);		ch = 'true';	CPPUNIT_ASSERT ( Char::isPunctuation ( ch) == false);		ch = '#';	CPPUNIT_ASSERT ( Char::isPunctuation ( ch) == true);		ch = '2';	CPPUNIT_ASSERT ( Char::isPunctuation ( ch) == false);		ch = '$';	CPPUNIT_ASSERT ( Char::isPunctuation ( ch) == false);		ch = ';';	CPPUNIT_ASSERT ( Char::isPunctuation ( ch) == true);	ch = '23';	CPPUNIT_ASSERT ( Char::isPunctuation ( ch) == false);		ch = '23';	CPPUNIT_ASSERT ( Char::isPunctuation ( ch) == false);}voidCharTestCase::isSeperator (void){		wchar_t ch = 'a';	CPPUNIT_ASSERT ( Char::isSeperator ( ch) == false);		ch = 'A';	CPPUNIT_ASSERT ( Char::isSeperator ( ch) == false);		ch = 'true';	CPPUNIT_ASSERT ( Char::isSeperator ( ch) == false);		ch = '#';	CPPUNIT_ASSERT ( Char::isSeperator ( ch) == false);		ch = ';';	CPPUNIT_ASSERT ( Char::isSeperator ( ch) == false);	ch = '23';	CPPUNIT_ASSERT ( Char::isSeperator ( ch) == false);		ch = '23';	CPPUNIT_ASSERT ( Char::isSeperator ( ch) == false);		ch = '\\';	CPPUNIT_ASSERT ( Char::isSeperator ( ch) == false);		ch = '/';	CPPUNIT_ASSERT ( Char::isSeperator ( ch) == false);		ch = '//';	CPPUNIT_ASSERT ( Char::isSeperator ( ch) == false);		ch = ':';	CPPUNIT_ASSERT ( Char::isSeperator ( ch) == false);		ch = '::';	CPPUNIT_ASSERT ( Char::isSeperator ( ch) == false);		ch = ' ';	CPPUNIT_ASSERT ( Char::isSeperator ( ch) == true);}voidCharTestCase::isSymbol (void){	wchar_t ch = 'a';	CPPUNIT_ASSERT ( Char::isSymbol ( ch) == false );		ch = 'A';	CPPUNIT_ASSERT ( Char::isSymbol ( ch) == false );		ch = 'true';	CPPUNIT_ASSERT ( Char::isSymbol ( ch) == false );		ch = '#';	CPPUNIT_ASSERT ( Char::isSymbol ( ch) == false );		ch = ';';	CPPUNIT_ASSERT ( Char::isSymbol ( ch) == false );	ch = '23';	CPPUNIT_ASSERT ( Char::isSymbol ( ch) == true );		ch = '23';	CPPUNIT_ASSERT ( Char::isSymbol ( ch) == true );		ch = '34';	CPPUNIT_ASSERT ( Char::isSymbol ( ch) == true );	}